using SolidWorks.Interop.sldworks;
using SolidWorks.Interop.swconst;
using System.Drawing;
using System.IO;
using System.Linq;

namespace Hymma.SolidTools.Addins
{
    /// <summary>
    /// a bitmap button for property manager page
    /// </summary>
    public class PmpBitmapButton : PmpButtonBase<PropertyManagerPageBitmapButton>
    {
        #region private fields

        private Bitmap _bitmap;
        private string _fileName;
        private BitmapButtons _standardIcon;
        #endregion

        #region constructors

        /// <summary>
        /// generate a button with specified <see cref="Bitmap"/>
        /// </summary>
        /// <param name="bitmap">bitmap to edit and set in the property manager page</param>
        /// <param name="fileName">resultant bitmap file name on disk without extensions or directory</param>
        /// <param name="tip">text for this button tooltip</param>
        public PmpBitmapButton(Bitmap bitmap, string fileName, string tip) : base(swPropertyManagerPageControlType_e.swControlType_BitmapButton, "", tip)
        {
            _bitmap = bitmap;
            _fileName = string.Concat(fileName.Split(Path.GetInvalidFileNameChars()));
            OnRegister += PmpBitmapButton_OnRegister;
        }

        /// <summary>
        /// generate a button with standard icons
        /// </summary>
        /// <param name="standardIcon"></param>
        /// <param name="tip">text for this button tooltip</param>
        public PmpBitmapButton(BitmapButtons standardIcon, string tip) : base(swPropertyManagerPageControlType_e.swControlType_BitmapButton, "", tip)
        {
            _standardIcon = standardIcon;
            OnRegister += PmpBitmapButton_OnRegister;
        }
        #endregion

        #region call backs
        private void PmpBitmapButton_OnRegister()
        {
            if (_bitmap != null && _fileName != "")
            {
                SetBitmap(_bitmap, _fileName);
            }
            else if (_standardIcon != 0)
            {
                SetBitmap(_standardIcon);
            }
        }
        #endregion

        #region methods

        /// <summary>
        /// assign a bitmap to this bitmap button
        /// Images should use: <br/>
        /// 256-color palette.<br/>
        ///margin of at least 3 blank pixels on all sides of the image because this is where the button borders are drawn; i.e., any pixels in the image in these 3 outer rows and columns of pixels are obscured by the button borders.
        /// </summary>
        /// <remarks>The rest of the images (selected, highlight regular, highlight selected, and disabled) for this button are automatically generated by SOLIDWORKS</remarks>
        /// <param name="bitmap">bitmap to edit and set in the property manager page</param>
        /// <param name="fileName">resultant bitmap file name on disk without extensions or directory</param>
        public override void SetBitmap(Bitmap bitmap, string fileName)
        {
            var maskedImages=IconGenerator.GetBitmapButtonIcons(bitmap, fileName);
            var images = maskedImages.Select(c => c.Image).ToArray();
            var masks = maskedImages.Select(c => c.ImageMask).ToArray();
            if (SolidworksObject != null)
                SolidworksObject.SetBitmapsByName3(images, masks);
        }

        /// <summary>
        /// assign an icon to this bitmap button from a list of standard solidworks icons <br/>
        /// The not-clicked, clicked, and disabled states for the control are automatically set by the SOLIDWORKS application.
        /// </summary>
        /// <param name="standardIcon">standard icon as defined by <see cref="BitmapButtons"/></param>
        public void SetBitmap(BitmapButtons standardIcon)
        {
            if (SolidworksObject != null)
                SolidworksObject.SetStandardBitmaps((int)standardIcon);
        }
        #endregion
    }
}
