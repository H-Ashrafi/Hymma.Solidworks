using SolidWorks.Interop.sldworks;
using SolidWorks.Interop.swconst;
using Hymma.SolidTools.Extensions;
using System.Linq;
using System;
using System.Collections.Generic;
using static Hymma.SolidTools.SolidAddins.Logger;

namespace Hymma.SolidTools.SolidAddins
{
    /// <summary>
    /// provides useful extension methods for making controls for a property manager page in SOLIDWORKS         
    /// </summary>
    public static class IPropertyManagerPageExtensions2
    {
        #region private methods
        private static void UpdateControlWithPicture(IPropertyManagerPageControl t, IPmpControl control)
        {
            t.SetPictureLabelByName(control.ColorBitmap, control.MaskBitmap);
            t.OptionsForResize = control.OptionsForResize;
            t.Top = control.Top;
            t.Left = control.Left;
            t.Width = control.Width;
            t.Visible = control.Visible;
            t.Enabled = control.Enabled;
        }
        #endregion

        #region extension methods

        /// <summary>
        /// creates a group of type <see cref="PmpGroup"/>in solidworks proeprty maanger page and adds all controls inside that group 
        /// </summary>
        /// <param name="pmp"></param>
        /// <param name="Group">a group that contains numerious <see cref="PmpControl"/></param>
        /// <param name="controls">a dictionary of controls generated by this methode where key is the id of the control</param>
        /// <returns></returns>
        public static void AddGroup(this IPropertyManagerPage2 pmp, PmpGroup Group, Dictionary<int, object> controls)
        {
            if (Group is null || Group.Controls.Count == 0)
                throw new ArgumentNullException(nameof(Group));

            //assing solidworks groups
            IPropertyManagerPageGroup group = null;
            group = pmp.AddGroup(Group.Id, Group.Caption, (short)Group.Options);
            if (group == null)
            {
                Log("Error! couldnt creat a group in property manager page");
                throw new ArgumentNullException(nameof(group));
            }
            
            //update the expand status of group box
            group.Expanded = Group.Expanded;

            //register this control to controls dictionary
            controls.Add(Group.Id, group);

            //add controls of each box to solidworks pmp 
            foreach (var control in Group.Controls)
            {
                switch (control.Type)
                {
                    //label
                    case swPropertyManagerPageControlType_e.swControlType_Label:
                        //cast into propert ojbect
                        var c = control as PmpLabel;

                        //add object to property manager page
                        _ = pmp.AddLabel(group, c);
                        break;

                    //checkboxes
                    case swPropertyManagerPageControlType_e.swControlType_Checkbox:
                        var checkbox = pmp.AddCheckBox(group, control as PmpCheckBox);
                        controls.Add(control.Id, checkbox);
                        break;

                    //buttons
                    case swPropertyManagerPageControlType_e.swControlType_Button:
                        var d = control as PmpButton;
                        _ = pmp.AddButton(group, d);
                        break;

                    //radio buttons
                    case swPropertyManagerPageControlType_e.swControlType_Option:
                        var radioButton = pmp.AddRadioButton(group, control as PmpRadioButton);
                        controls.Add(control.Id, radioButton);
                        break;

                    //textboxes
                    case swPropertyManagerPageControlType_e.swControlType_Textbox:
                        var f = control as PmpTextBox;
                        _ = pmp.AddTextBox(group, f);
                        break;

                    //list boxes
                    case swPropertyManagerPageControlType_e.swControlType_Listbox:
                        var g = control as PmpListBox;
                        _ = pmp.AddListbox(group, g);
                        break;

                    //combo box
                    case swPropertyManagerPageControlType_e.swControlType_Combobox:
                        var com = control as PmpComboBox;
                        _ = pmp.AddCombobox(group, com);
                        break;

                    //number box
                    case swPropertyManagerPageControlType_e.swControlType_Numberbox:
                        var num = control as PmpNumberBox;
                        _ = pmp.AddNumberbox(group, num);
                        break;
                    case swPropertyManagerPageControlType_e.swControlType_Selectionbox:
                        var sel = control as PmpSelectionBox;
                        _ = pmp.AddSelectionbox(group, sel);
                        break;
                    case swPropertyManagerPageControlType_e.swControlType_ActiveX:
                        break;
                    case swPropertyManagerPageControlType_e.swControlType_BitmapButton:
                        var bbutton = control as PmpBitmapButtonCustom;
                        _ = pmp.AddBitmapButton(group, bbutton);
                        break;
                    case swPropertyManagerPageControlType_e.swControlType_CheckableBitmapButton:
                        _ = pmp.AddBitmapButton(group, control as PmpBitmapButtonCheckable);
                        break;
                    case swPropertyManagerPageControlType_e.swControlType_Slider:
                        break;
                    case swPropertyManagerPageControlType_e.swControlType_Bitmap:
                        _ = pmp.AddBitmap(group, control as PmpBitmap);
                        break;
                    case swPropertyManagerPageControlType_e.swControlType_WindowFromHandle:
                        _ = pmp.AddWindowFromHandle(group, control as PmpWindowHandler);
                        break;
                    default:
                        break;
                }
            }
        }


        /// <summary>
        /// adds a checkbox aligned to the left
        /// </summary>
        /// <param name="group">group to add the control to, will add the control to Property manager page if this parameter is null</param>
        /// <param name="pmp">the propertye manage page to add this checkbox to</param>
        /// <param name="checkBox">a checkbox as per <see cref="PmpCheckBox"/></param>
        /// <returns><see cref="IPropertyManagerPageCheckbox"/></returns>
        public static IPropertyManagerPageCheckbox AddCheckBox(this IPropertyManagerPage2 pmp, IPropertyManagerPageGroup group, PmpCheckBox checkBox)
        {
            //make a checkbox
            var result = pmp.AddCheckBox(group, checkBox.Id, checkBox.Caption, checkBox.Tip, checkBox.LeftIndet, checkBox.Options);

            //set initial state of checkbox 
            result.Checked = checkBox.IsChecked;

            //return the checkbox
            return result;
        }

        /// <summary>
        /// adds a Text-Box aligned to the left
        /// </summary>
        /// <param name="group">group to add the control to, will add the control to Property manager page if this parameter is null</param>
        /// <param name="textBox">a text box for solidworks <see cref="PmpTextBox"/></param>
        /// <returns><see cref="IPropertyManagerPageTextbox"/></returns>
        public static IPropertyManagerPageTextbox AddTextBox(this IPropertyManagerPage2 pmp, IPropertyManagerPageGroup group, PmpTextBox textBox)
        {
            var result = pmp.AddTextBox(group, textBox.Id, textBox.Caption, textBox.Tip, textBox.LeftIndet, textBox.Options);

            //set initial state of text box
            result.Text = textBox.InitialValue;

            //update generic properties of this control
            UpdateControlWithPicture(result as PropertyManagerPageControl, textBox);

            //return text box 
            return result;
        }

        /// <summary>
        /// adds a button aligned to the left
        /// </summary>
        /// <param name="group">group to add the control to, will add the control to Property manager page if this parameter is null</param>
        /// <returns><see cref="IPropertyManagerPageButton"/></returns>
        public static IPropertyManagerPageButton AddButton(this IPropertyManagerPage2 pmp, IPropertyManagerPageGroup group, PmpButton button)
        {
            var result = pmp.AddButton(group, button.Id, button.Caption, button.Tip, button.LeftIndet, button.Options);
            var control = result as PropertyManagerPageControl;
            UpdateControlWithPicture(control, button);
            return result;
        }

        /// <summary>
        /// adds a Label aligned to the left
        /// </summary>
        /// <param name="group">group to add the control to, will add the control to Property manager page if this parameter is null</param>
        /// <returns><see cref="IPropertyManagerPageLabel"/></returns>
        public static IPropertyManagerPageLabel AddLabel(this IPropertyManagerPage2 pmp, IPropertyManagerPageGroup group, PmpLabel Swlabel)
        {
            //make a label
            var result = pmp.AddLabel(group, Swlabel.Id, Swlabel.Caption, Swlabel.Tip, Swlabel.LeftIndet, Swlabel.Options);

            //set label specific properties
            UpdateControlWithPicture(result as PropertyManagerPageControl, Swlabel);

            //return label
            return result;
        }

        /// <summary>
        /// adds a radio-button (option) aligned to the left
        /// </summary>
        /// <param name="group">group to add the control to, will add the control to Property manager page if this parameter is null</param>
        /// <param name="pmp">property mangaer page object</param>
        /// <param name="radioButton">a soldiworks radio button <see cref="PmpRadioButton"/></param>
        /// <returns><see cref="IPropertyManagerPageOption"/></returns>
        public static IPropertyManagerPageOption AddRadioButton(this IPropertyManagerPage2 pmp, IPropertyManagerPageGroup group, PmpRadioButton radioButton)
        {
            var result = pmp.AddRadioButton(group, radioButton.Id, radioButton.Caption, radioButton.Tip, radioButton.LeftIndet, radioButton.Options);
            result.Checked = radioButton.IsChecked;
            return result;
        }

        /// <summary>
        /// adds a Listbox aligned to the left
        /// </summary>
        /// <param name="group">group to add the control to, will add the control to Property manager page if this parameter is null</param>
        /// <returns><see cref="IPropertyManagerPageListbox"/></returns>
        public static IPropertyManagerPageListbox AddListbox(this IPropertyManagerPage2 pmp, IPropertyManagerPageGroup group, PmpListBox listBox)
        {
            //set up list box
            var result = pmp.AddListbox(group, listBox.Id, listBox.Caption, listBox.Tip, listBox.Items.ToArray(), listBox.Height, listBox.LeftIndet, listBox.Options);
            result.Height = listBox.Height;
            result.AddItems(listBox.Items.ToArray());
            UpdateControlWithPicture(result as PropertyManagerPageControl, listBox);
            return result;
        }

        /// <summary>
        /// adds a Combobox aligned to the left
        /// </summary>
        /// <param name="group">group to add the control to, will add the control to Property manager page if this parameter is null</param>
        /// <returns><see cref="IPropertyManagerPageCombobox"/></returns>
        public static IPropertyManagerPageCombobox AddCombobox(this IPropertyManagerPage2 pmp, IPropertyManagerPageGroup group, PmpComboBox comboBox)
        {
            //setup combo box
            var result = pmp.AddCombobox(group, comboBox.Id, comboBox.Caption, comboBox.Tip, comboBox.Height, comboBox.Items.ToArray(), comboBox.LeftIndet, comboBox.Options);

            //setup combo box properties
            UpdateControlWithPicture(comboBox as PropertyManagerPageControl, comboBox);
            return result;
        }

        /// <summary>
        /// adds a numberbox to the property manager page
        /// </summary>
        /// <param name="group">group to add this controlt to</param>
        /// <param name="numberBox"></param>
        /// <returns></returns>
        public static IPropertyManagerPageNumberbox AddNumberbox(this IPropertyManagerPage2 pmp, IPropertyManagerPageGroup group, PmpNumberBox numberBox)
        {
            var result = pmp.AddNumberbox(group, numberBox.Id, numberBox.Caption, numberBox.Tip, numberBox.InitialValue,
                (int)numberBox.Unit, numberBox.Min, numberBox.Max, numberBox.Increment, numberBox.Inclusive, numberBox.LeftIndet, numberBox.Options);
            UpdateControlWithPicture(result as IPropertyManagerPageControl, numberBox);
            return result;
        }

        /// <summary>
        /// add a selection box to property manager page
        /// </summary>
        /// <param name="group">the group this control gets added to</param>
        /// <param name="box"></param>
        /// <returns></returns>
        public static IPropertyManagerPageSelectionbox AddSelectionbox(this IPropertyManagerPage2 pmp,
            IPropertyManagerPageGroup group,
            PmpSelectionBox box)
        {
            var result = pmp.AddSelectionbox(group, box.Id, box.Caption, box.Tip, box.Height, box.Filter.Select(b => (int)b).ToArray(), box.LeftIndet, box.Options);
            UpdateControlWithPicture(result as IPropertyManagerPageControl, box);
            return result;
        }


        /// <summary>
        /// adds a bitmap of type <see cref="PmpBitmapButtonCustom"/> to proerty manager page
        /// </summary>
        /// <returns></returns>
        public static IPropertyManagerPageBitmapButton AddBitmapButton(this IPropertyManagerPage2 pmp, IPropertyManagerPageGroup group, PmpBitmapButtonCustom button)
        {
            var swButton = pmp.AddBitmapButton(group, button.Id, button.Caption, button.Tip, button.LeftIndet, button.Options);
            UpdateControlWithPicture(swButton as IPropertyManagerPageControl, button);
            swButton.SetBitmapsByName3(button.ImageList, button.MaskedImageList);
            return swButton;
        }


        /// <summary>
        /// adds a bitmap of type <see cref="PmpBitmapButtonCustom"/> to proerty manager page
        /// </summary>
        /// <returns></returns>
        public static IPropertyManagerPageBitmapButton AddBitmapButton(this IPropertyManagerPage2 pmp, IPropertyManagerPageGroup group, PmpBitmapButtonCheckable button)
        {
            var swButton = pmp.AddBitmapButton(group, button.Id, button.Caption, button.Tip, button.LeftIndet, button.Options);
            UpdateControlWithPicture(swButton as IPropertyManagerPageControl, button);
            swButton.SetBitmapsByName3(button.ImageList, button.MaskedImageList);
            swButton.Checked = button.Checked;
            swButton.IsCheckable = button.IsCheckable;
            return swButton;
        }

        /// <summary>
        /// adds a bitmap of type <see cref="PmpBitmapButtonStandard"/> to proerty manager page
        /// </summary>
        /// <returns></returns>
        public static IPropertyManagerPageBitmapButton AddBitmapButton(this IPropertyManagerPage2 pmp, IPropertyManagerPageGroup group, PmpBitmapButtonStandard button)
        {
            var swButton = pmp.AddBitmapButton(group, button.Id, button.Caption, button.Tip, button.LeftIndet, button.Options);
            UpdateControlWithPicture(swButton as IPropertyManagerPageControl, button);
            swButton.SetStandardBitmaps((int)button.Image);
            return swButton;
        }

        /// <summary>
        /// adds a bitmap of type <see cref="PmpBitmap"/> to this property manager page
        /// </summary>
        public static IPropertyManagerPageBitmap AddBitmap(this IPropertyManagerPage2 pmp, IPropertyManagerPageGroup group, PmpBitmap bitmap)
        {
            var swBitmap = pmp.AddBitmap(group, bitmap.Id, bitmap.Caption, bitmap.Tip, bitmap.LeftIndet, bitmap.Options);
            UpdateControlWithPicture(swBitmap as IPropertyManagerPageControl, bitmap);
            swBitmap.SetBitmapByName(bitmap.ColorBitmap, bitmap.MaskBitmap);
            return swBitmap;
        }

        /// <summary>
        /// adds a WindowFromHandle aligned to the left
        /// <br/> use this to add WPF or windows form controls to PMP
        /// </summary>
        /// <param name="group">group to add the control to, will add the control to Property manager page if this parameter is null</param>
        /// <returns><see cref="IPropertyManagerPageWindowFromHandle"/></returns>
        public static IPropertyManagerPageWindowFromHandle AddWindowFromHandle(this IPropertyManagerPage2 pmp, IPropertyManagerPageGroup group, PmpWindowHandler windowHandler)
        {
            var result = pmp.AddWindowFromHandle(group, windowHandler.Id, windowHandler.Caption, windowHandler.Tip, windowHandler.LeftIndet, windowHandler.Options);
            windowHandler.ProperptyManagerPageHandle = result;
            UpdateControlWithPicture(result as IPropertyManagerPageControl, windowHandler);
            return result;
        }
        #endregion
    }
}
